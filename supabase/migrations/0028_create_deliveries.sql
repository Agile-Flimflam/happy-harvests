begin;

    -- Main deliveries table
    create table
    if not exists public.deliveries
    (
  id uuid not null default gen_random_uuid
    () primary key,
  created_at timestamptz not null default now
    (),
  updated_at timestamptz not null default now
    (),
  customer_id uuid references public.customers
    (id),
  delivery_date date not null,
  status text,                -- e.g., scheduled, delivered, canceled
  payment_terms text,         -- e.g., Net 15, COD
  payment_status text,        -- e.g., invoiced, paid, overdue
  notes text
);

-- Items belonging to a delivery
create table
if not exists public.delivery_items
(
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now
(),
  delivery_id uuid not null references public.deliveries
(id) on
delete cascade,
  crop_variety_id bigint
references public.crop_varieties
(id),
  planting_id bigint references public.plantings
(id),
  qty numeric,
  unit text,
  price_per numeric,          -- price per unit
  total_price numeric,        -- optional explicit total
  notes text
);

alter table public.deliveries enable row level security;
alter table public.delivery_items enable row level security;

create policy "deliveries: authenticated all" on public.deliveries for all to authenticated using
(true) with check
(true);
create policy "delivery_items: authenticated all" on public.delivery_items for all to authenticated using
(true) with check
(true);

-- Updated at trigger
create or replace function public.set_updated_at
() returns trigger language plpgsql as $$
begin
  new.updated_at = now
();
return new;
end; $$;

drop trigger if exists set_deliveries_updated_at
on public.deliveries;
create trigger set_deliveries_updated_at before
update on public.deliveries for each row
execute
function public.set_updated_at
();

commit;


